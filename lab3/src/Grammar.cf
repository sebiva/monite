comment "#" ;

PProg.   Program ::= [Exp] ;

ECompL.  Exp5 ::= "{" Exp ":" Lit "<-" "[" [ListEl] "]" "}" ;
EComp.   Exp5 ::= "{" Exp ":" Lit "<-" Exp "}" ;
ELet.    Exp4 ::= "let" Lit "=" Exp ;
ELetIn.  Exp3 ::= "let" Lit "=" Exp "in" Exp ;
EList.   Exp2 ::= "[" [ListEl] "]" ;
EStr.    Exp1 ::= String ;
ECmd.    Exp1 ::= Cmd ;
separator Exp ";" ;
coercions Exp 5 ;

LExp. ListEl  ::= Exp ;
separator ListEl "," ;

CText.    Cmd4 ::= [Text] ;
CPipe.    Cmd3 ::= Cmd3 "|" Cmd4 ;
COut.     Cmd2 ::= Cmd2 ">" Text ;
CIn.      Cmd1 ::= Cmd1 "<" Text ;
coercions Cmd 4 ;


TLit.    Text ::= Lit ;
separator nonempty Text "" ;

{-token Var ('$' (letter | digit | '_') (letter | digit | '_')*) ;-}
{-token Id ((letter | digit | '_') (letter | digit | '_')*) ;-}
token Lit (char - ["\",()[]<>|{};:\t\n "] (char - ["\",()[]<>|{};:\t\n "])* ) ; --) - ']') - '=') - '|')*) ;

